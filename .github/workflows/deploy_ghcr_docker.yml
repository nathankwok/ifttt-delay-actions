name: Publish Docker image

on:
  push:
    branches:
      - "main"
      - "master"

env:
  REGISTRY: ghcr.io
  # github.repository = <account>/<repo_name>
  IMAGE_NAME: ${{ github.repository }}
  LATEST_TAG: latest
  BACKUP_TAG: backup
  TO_REMOVE_TAG: to_remove


jobs:
  push_to_registries:
    name: Push Docker image to multiple registries
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Parse Repository Name
        id: parse_repo_name
        # REPO_NAME = ifttt-delay-actions
        run: echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Check out the repo
        id: checkout_code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        id: docker_hub_login
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to the Github Container Registry
        id: ghcr_login
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_CLEAN_IMAGES_TOKEN }}


      # Pull previous `latest` GitHub Container Registry image
      - name: Pull previous latest GitHub Container Registry image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}

      # Pull previous `backup` GitHub Container Registry image
      - name: Pull previous backup GitHub Container Registry image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BACKUP_TAG }}



      # Tag previous `backup` GitHub Container Registry image with `to_remove` tag
      - name: Tag previous latest GitHub Container Registry image with backup tag
        run: docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BACKUP_TAG }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TO_REMOVE_TAG }}

      # Tag previous `latest` GitHub Container Registry image with `backup` tag
      - name: Tag previous latest GitHub Container Registry image with backup tag
        run: docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BACKUP_TAG }}

      # Tag Docker Hub image with `backup` tag using the newly tagged GitHub `backup` image
      - name: Tag Docker Hub image with backup tag
        run: docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BACKUP_TAG }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:${{ env.BACKUP_TAG }}



      # Push `to_remove` GitHub image
      - name: Push to_remove GitHub Container Registry image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TO_REMOVE_TAG }}

      # Push `backup` GitHub image
      - name: Push backup GitHub Container Registry image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BACKUP_TAG }}

      # Push `backup` Docker Hub image
      - name: Push backup Docker Hub image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:${{ env.BACKUP_TAG }}



      # Get image names with proper tags
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}
          # set latest tag for default branch
          tags: |
            type=raw,value=${{ env.LATEST_TAG }}
            type=raw,value={{branch}}

      # Build and tag current image with `latest` tag. Push to GitHub and Docker Hub container registries
      - name: Build and push Docker images
        id: build_push_current_image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Deploy the image to an existing Northflank service or job
      - name: Deploy to Northflank
        uses: northflank/deploy-to-northflank@v1
        with:
          northflank-api-key: ${{ secrets.NORTHFLANK_API_KEY }}
          project-id: ${{ secrets.NORTHFLANK_PROJECT_ID }}
          service-id: ${{ secrets.NORTHFLANK_SERVICE_ID }}
          image-path: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:${{ env.LATEST_TAG }}


      # Install jq so scripts can parse json
      - name: Setup jq
        uses: dcarbone/install-jq-action@v1.0.1
        with:
          version: '1.6'
          force: false

      # Deletes images that are untagged (dangling)
      - name: Delete untagged images from GitHub Container Registry
        env:
          GH_TOKEN: ${{ secrets.GH_CLEAN_IMAGES_TOKEN }}
        run: ./workflow_scripts/remove_images_using_tags.sh ${{ env.REPO_NAME }}

      # Deletes images that have `to_remove` tag
      - name: Delete to_remove images from GitHub Container Registry
        env:
          GH_TOKEN: ${{ secrets.GH_CLEAN_IMAGES_TOKEN }}
        run: ./workflow_scripts/remove_images_using_tags.sh ${{ env.REPO_NAME }} ${{ env.to_remove }}
